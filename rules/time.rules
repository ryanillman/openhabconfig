var Timer  blindUpTimer
var Timer  ryanAlarmTimer
var Number ryanAlarmTarget = 40
var Number ryanAlarmStep   = 1

var Number blindsUnderManualControl = 0


rule "Ryan's Alarm On"
when
  Time cron "0 0 5 ? * MON-FRI" or
  Time cron "1 0 5 ? * MON-FRI"
then
  logInfo("ryans-alarm.rule", "In Ryan's Alarm")

  if (ryanAlarmTimer !== null && !ryanAlarmTimer.hasTerminated()) {
    logInfo("ryans-alarm.rule", "timer was already running, cancelling")
    try {
      ryanAlarmTimer.cancel();
    }
    catch (Throwable e) {
      logInfo("ryans-alarm.rule", "some sort of exception... " + e.toString());
    }
  }

  if (RyanPresent.state == ON) {
    ryanAlarmTimer = createTimer(now, [ |
       if ((RyansLamp_Dimmer.state as Number) >= ryanAlarmTarget) {
         logInfo("ryans-alarm.rule", "Ryans alarm reached target, ending sequence");
         return;
       }
       else {
         RyansLamp_Dimmer.sendCommand((RyansLamp_Dimmer.state as Number) + ryanAlarmStep)
         ryanAlarmTimer.reschedule(now.plusMinutes(1))
       }
    ])
  }
  else {
     logInfo("ryans-alarm.rule", "Ryan not present, so not turning on the alarm")
  }
end


rule "Ryans Alarm Off"
when
  Time cron "0 30 7 ? * *" or
  Item RyanPresent changed to OFF
then
  RyansLamp_Dimmer.sendCommand(OFF)
end


rule "Cancel Ryans Alarm if overridden"
when
  Item RyansLamp_Dimmer received command OFF
then
  if (ryanAlarmTimer !== null) {
    ryanAlarmTimer.cancel()
  }
end







