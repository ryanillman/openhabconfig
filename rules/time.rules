var Timer  blindUpTimer
var Timer  ryanAlarmTimer
var Number ryanAlarmTarget = 40
var Number ryanAlarmStep   = 1

var Number blindsUnderManualControl = 0

rule "Blinds open"
when
  Time cron "0  0 8 ? * MON-FRI" or
  Time cron "0 30 8 ? * SAT,SUN"
then
    LRBlindL_Rollershutter.sendCommand(UP)
    LRBlindC_Rollershutter.sendCommand(UP)
    LRBlindR_Rollershutter.sendCommand(UP)

    BlindNookR_Rollershutter.sendCommand(UP)
    BlindNookL_Rollershutter.sendCommand(UP)
  
    CaitsOfficeBlinds_Rollershutter.sendCommand(UP)
    RyansOfficeBlinds_Rollershutter.sendCommand(UP)
    StairwellBlinds_Rollershutter.sendCommand(UP)
    KitchenBlinds_Rollershutter.sendCommand(UP)

    blindsUnderManualControl = 0
end

rule "Bedroom blinds open"
when
  Time cron "0 0 8 ? * MON-FRI" or
  Time cron "0 30 8 ? * SAT,SUN"
then
    BedroomBlinds_Rollershutter.sendCommand(UP)
    GuestBedBlinds_Rollershutter.sendCommand(UP)
end


rule "Ryan's Alarm On"
when
  Time cron "0 0 5 ? * MON-FRI" or
  Time cron "1 0 5 ? * MON-FRI"
then
  logInfo("ryans-alarm.rule", "In Ryan's Alarm")

  if (ryanAlarmTimer !== null && !ryanAlarmTimer.hasTerminated()) {
    logInfo("ryans-alarm.rule", "timer was already running, cancelling")
    try {
      ryanAlarmTimer.cancel();
    }
    catch (Throwable e) {
      logInfo("ryans-alarm.rule", "some sort of exception... " + e.toString());
    }
  }

  if (RyanPresent.state == ON) {
    ryanAlarmTimer = createTimer(now, [ |
       if ((RyansLamp_Dimmer.state as Number) >= ryanAlarmTarget) {
         logInfo("ryans-alarm.rule", "Ryans alarm reached target, ending sequence");
         return;
       }
       else {
         RyansLamp_Dimmer.sendCommand((RyansLamp_Dimmer.state as Number) + ryanAlarmStep)
         ryanAlarmTimer.reschedule(now.plusMinutes(1))
       }
    ])
  }
  else {
     logInfo("ryans-alarm.rule", "Ryan not present, so not turning on the alarm")
  }
end


rule "Ryans Alarm Off"
when
  Time cron "0 30 7 ? * *" or
  Item RyanPresent changed to OFF
then
  RyansLamp_Dimmer.sendCommand(OFF)
end


rule "Cancel Ryans Alarm if overridden"
when
  Item RyansLamp_Dimmer received command OFF
then
  if (ryanAlarmTimer !== null) {
    ryanAlarmTimer.cancel()
  }
end



rule "Morning Lights on weekday"
when
  Time cron "0 0 6 ? * MON-FRI"
then
  Scene_MorningLights.sendCommand(ON)
  State_isNight.sendCommand(OFF)

  RyansDeskLamp_Dimmer.sendCommand(ON)
  RyansOtherDeskLamp_Dimmer.sendCommand(ON)
end

rule "Morning Lights on weekend"
when
  Time cron "0 30 7 ? * SAT,SUN"
then
  Scene_MorningLights.sendCommand(ON)
  State_isNight.sendCommand(OFF)
end



rule "Drinking Time"
when
  Time cron "0 0 12 ? * * " 
then
  if (CoffeeLight_Switch.state == ON) { 
     CoffeeLight_Switch.sendCommand(OFF)
     BarLights_Dimmer.sendCommand(ON)
  }  
end




rule "Evening Lights on"
when
  //TODO: this should be by indoor/outdoor luminance, with some sort of check that
  //the TV isn't playing a show, which we'll need a FireTV Cube for
  Time cron "0 0 16 ? * * "
then
  Scene_EveningLights.sendCommand(ON)
end


rule "Blinds close at sunset"
when
  Channel "astro:sun:local:set#event" triggered START
then
    LRBlindL_Rollershutter.sendCommand(DOWN)
    LRBlindC_Rollershutter.sendCommand(DOWN)
    LRBlindR_Rollershutter.sendCommand(DOWN)

    BlindNookL_Rollershutter.sendCommand(DOWN)
    BlindNookR_Rollershutter.sendCommand(DOWN)

    BedroomBlinds_Rollershutter.sendCommand(DOWN)

    CaitsOfficeBlinds_Rollershutter.sendCommand(DOWN)
    GuestBedBlinds_Rollershutter.sendCommand(DOWN)
    RyansOfficeBlinds_Rollershutter.sendCommand(DOWN)
    StairwellBlinds_Rollershutter.sendCommand(DOWN)
    KitchenBlinds_Rollershutter.sendCommand(DOWN)
end

rule "Blinds close when it gets dark out"
when
  Item FrontPorchMultisensor_SensorLuminance changed
then
  if ((FrontPorchMultisensor_SensorLuminance.state as Number).intValue <= 20 && now.getHourOfDay > 15 && 0 == blindsUnderManualControl) {
    LRBlindL_Rollershutter.sendCommand(DOWN)
    LRBlindC_Rollershutter.sendCommand(DOWN)
    LRBlindR_Rollershutter.sendCommand(DOWN)

    BlindNookL_Rollershutter.sendCommand(DOWN)
    BlindNookR_Rollershutter.sendCommand(DOWN)

    BedroomBlinds_Rollershutter.sendCommand(DOWN)

    CaitsOfficeBlinds_Rollershutter.sendCommand(DOWN)
    GuestBedBlinds_Rollershutter.sendCommand(DOWN)
    RyansOfficeBlinds_Rollershutter.sendCommand(DOWN)
    StairwellBlinds_Rollershutter.sendCommand(DOWN)
    KitchenBlinds_Rollershutter.sendCommand(DOWN)
  }
end

rule "Blinds go out of auto mode if someone messes with them"
when
  Item LRBlindL_Rollershutter received command UP or
  Item LRBlindC_Rollershutter received command UP or
  Item LRBlindR_Rollershutter received command UP or

  Item BlindNookL_Rollershutter received command UP or
  Item BlindNookR_Rollershutter received command UP or

  Item BedroomBlinds_Rollershutter received command UP or

  Item CaitsOfficeBlinds_Rollershutter received command UP or
  Item GuestBedBlinds_Rollershutter received command UP or
  Item RyansOfficeBlinds_Rollershutter received command UP or
  Item StairwellBlinds_Rollershutter received command UP or
  Item  KitchenBlinds_Rollershutter received command UP
then
  blindsUnderManualControl = 1
end




rule "Nighttime"
when
  Time cron "0 30 22 ? * MON,TUE,WED,THU,SUN *" or
  Time cron "0 59 23 ? * FRI,SAT *"
then
  Scene_AllOff.sendCommand(ON)
  Scene_NightLights.sendCommand(ON)
  State_isNight.sendCommand(ON)
end



rule "Auto Deck Lights"
when
  Item LocalSun_Position_Elevation changed
then
  var int cloudiness =(LocalWeatherAndForecast_Current_Cloudiness.state as Number).intValue
  var int temperature = (LocalWeatherAndForecast_Current_OutdoorTemperature.state as Number).intValue
  var int elevation = (LocalSun_Position_Elevation.state as Number).intValue

  //the cloudier it is, the earlier the lights should turn on
  var int topElevation = 15 + ( 20 * (cloudiness / 100))

  //68 is a rough guess of when we'd likely be outside
  if (elevation < topElevation && elevation > 0 && temperature > 68) {
    DeckLights_Switch.sendCommand(ON)
  }
end
