var Timer bathroomNightlightTimer
var Timer bedroomTimer
var Timer kitchenNightlightTimer
var Timer livingroomNightlightTimer
var Timer ryanOfficeNightlightTimer

rule "Kitchen light turns on when motion at night"
when
  Item KitchenMultisensor_AlarmMotion changed to ON
then
  if (State_isNight.state == ON) {
    logInfo("kitchen.motion.nightlight", "kitchen nightlight triggered!");
    KitchenCornerLight_Dimmer.sendCommand(80);

    if (kitchenNightlightTimer !== null && !kitchenNightlightTimer.hasTerminated()) {
      kitchenNightlightTimer.cancel();
    }

    kitchenNightlightTimer = createTimer(now.plusMinutes(5), [ |
      KitchenCornerLight_Dimmer.sendCommand(0);
    ])
  }
  else {
    logInfo("kitchen.motion.nightlight", "not triggered because not night" + State_isNight.state.toString());
  }
end



rule "Livingroom light turns on when motion at night"
when
  Item LivingRoomMultisensor_AlarmMotion changed to ON OR
then
  if (State_isNight.state == ON) {
    logInfo("livingroom.motion.nightlight", "livingroom nightlight triggered!");
    SofaTableLamps_Dimmer.sendCommand(30);

    if (livingroomNightlightTimer !== null && !livingroomNightlightTimer.hasTerminated()) {
      livingroomNightlightTimer.cancel();
    }

    livingroomNightlightTimer  = createTimer(now.plusMinutes(5), [ |
      try {    
          SofaTableLamps_Dimmer.sendCommand(0);
      } catch (Throwable e) {
	logInfo("livingroom.motion.nightlight", "exception in off timer: " + e.toString);
      }
    ])
  }
  else {
    logInfo("livingroom.motion.nightlight", "not triggered because not night" + State_isNight.state.toString());
  }
end

rule "Ryans Office light turns on when motion at night"
when
  Item RyansOfficeMultisensor_AlarmMotion changed to ON
then
  if (State_isNight.state == ON) {
    logInfo("ryanoffice.motion.nightlight", "ryans office nightlight triggered!");
    RyansDeskLamp_Dimmer.sendCommand(100);
    RyansOtherDeskLamp_Dimmer.sendCommand(100)

    if (ryanOfficeNightlightTimer !== null && !ryanOfficeNightlightTimer.hasTerminated()) {
      ryanOfficeNightlightTimer.cancel();
    }

    ryanOfficeNightlightTimer = createTimer(now.plusMinutes(5), [ |
      RyansDeskLamp_Dimmer.sendCommand(0);
      RyansOtherDeskLamp_Dimmer.sendCommand(0)
    ])
  }
  else {
    logInfo("ryanoffice.motion.nightlight", "not triggered because not night" + State_isNight.state.toString());
  }
end


rule "Master Bedroom Nonnight Light"
when
	Item MasterBedroomMultisensor_AlarmMotion changed to ON
then
	if ((MasterBedroomMultisensor_SensorLuminance.state as Number) < 5 && State_isNight.state == OFF && now.getHourOfDay > 10) {
		MasterBedroomOverheadLight_Dimmer.sendCommand(20)

		if (bedroomTimer !== null && !bedroomTimer.hasTerminated()) { bedroomTimer.cancel(); }		
		bedroomTimer = createTimer(now.plusMinutes(5), [ |
			MasterBedroomOverheadLight_Dimmer.sendCommand(OFF)
		])
	}
end


rule "Upstairs Blinds Close when the sun comes around"
when
  Item LocalSun_Position_Azimuth changed   
then
  var int cloudiness =(LocalWeatherAndForecast_Current_Cloudiness.state as Number).intValue
  var int sunpos = (LocalSun_Position_Azimuth.state as Number).intValue

  if (sunpos > 122 && sunpos < 130 && cloudiness < 50) {
    logInfo("upstairs-blinds-sun-close.rule", "closing upstairs blinds to prevent the sun from coming in")
    RyansOfficeBlinds_Rollershutter.sendCommand(DOWN)
    StairwellBlinds_Rollershutter.sendCommand(DOWN)
  }

  if (sunpos > 214 && sunpos < 220) {
    RyansOfficeBlinds_Rollershutter.sendCommand(UP)
    StairwellBlinds_Rollershutter.sendCommand(UP)
  }
end




